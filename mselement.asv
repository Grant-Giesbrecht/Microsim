classdef mselement < handle
% MSELEMENT This class represents one or more RF circuit elements in matrix
% form.
%
% This class was taken from rfmat in 'Eneceladus' and borrows elements from
% 'rfnet' in 'Eneceladus' as well.
%
	properties
		abcd  % ABCD matrix for entire element
		freqs % Frequencies over which ABCD exists
		desc  % Description of how this element was generated. TODO: Reform
	end
	
	methods
		function obj = mselement(freqs)
			obj.abcd = zeros(2, 2, numel(freqs));
			obj.freqs = freqs;
			obj.desc = [];
		end
		
		function obj = set_desc(obj, desc)
			% Initializes the MSE with a descriptor object and updates that
			% descriptor object to have the correct ABCD matrix and freq
			% list. This should only be called if the MSE does not have
			% sub-components
			
			% Check that desc is empty
			if numel(obj.desc) > 0
				warning("Inappropriate call to set_desc()!");
			end
			
			% Update ABCD and Freq parameters
			desc.abcd = obj.abcd;
			desc.freqs = obj.freqs;
			
			% Add to list
			obj.desc = desc;
		end
		
		function series(obj, mse)
			
			% Check freqs match
			if obj.freqs ~= mse.freqs
				error("Cannot multiply mselements with dissimilar frequency points.");
			end
			
			% Update object description ---------------------------------
			
			% Get last node from current description list
			add_node = obj.desc(end).node2 - 1;
			
			% Check that new element starts with node 1
			if mse.desc.node1 ~= 1
				warning("Failed to add element. Provided element has invalid netlist (node list must start at 1).");
				return;
			end
			
			% Loop over provided element's descriptors, adding 1 at a time
			for de = mse.desc
				
				% Add element
				obj.desc(end+1) = mse.desc
				
				% Update node naming
				obj.desc(end).node1 = obj.desc(end).node1 + add_node;
				obj.desc = addTo(obj.desc, desc)
			end
			
			% Update ABCD with Chained matricies
			for iter = 1:numel(obj.freqs)
				obj.abcd(:,:, iter) = obj.abcd(:,:,iter) * mse.abcd(:,:, iter);
			end
			
		end
		
		function parallel(obj, mse)
			
		end
	end
end